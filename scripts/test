#!/usr/bin/env node

/**
 * NodeOS
 *
 * @copyright 2013-2025 Jacob Groundwater, Jesús Leganés-Combarro 'piranna'
 *  and other contributors
 *
 * @license MIT
**/

let dependancies = {};

if (import.meta.main) {

    dependancies["path"] = await import("node:path");
    dependancies["suppose"] = await import("suppose");
    dependancies["prepareCommandLine"] = await import("..");

};
if (require.main !== undefined) {

    dependancies["path"] = require("node:path");
    dependancies["suppose"] = require("suppose");
    dependancies["prepareCommandLine"] = require("..");

};


const TIMEOUT = 300; /* seconds */


let {command, argv, cwd, platform, timeout_rate} = dependancies["prepareCommandLine"](process.argv.slice(2), 'nographic');

switch(platform) {
    
    case 'tar':
        fs.accessSync(dependancies["path"].join(cwd, 'bootfs.tar.gz'));
        fs.accessSync(dependancies["path"].join(cwd, 'usersfs.tar.gz'));
        process.exit();
        break;

    case 'vagga':
        fs.accessSync(dependancies["path"].join(cwd, 'barebones.tar.gz'));
        fs.accessSync(dependancies["path"].join(cwd, 'initramfs.tar.gz'));
        fs.accessSync(dependancies["path"].join(cwd, 'usersfs.tar.gz'));
        process.exit();
        break;
    
};


// Exec test
let exe;
let timeout = setTimeout(function() {
    
    exe.kill();
    console.error('Timeout while waiting an answer');
    process.exit(-2);

}, TIMEOUT*timeout_rate*1000);


const options = {stripAnsi: true, debug: true, cwd};
/* const options = {stripAnsi: true, debug: process.argv[2] === 'debug', cwd}; */
exe = dependancies["suppose"](command, argv, options);

/* On disk images, hook on the bootloader and force kernel to output to console */
if (platform === 'disk' || platform === 'img' || platform === 'iso') {
    
    exe.when('boot: ').respond('NodeOS console=ttyS0\n');
    
};

exe
.when(/username: /, 'nodeos\n')
.when(/password: /, 'nodeos\n')
.when('~ > '      , 'node\n')
.when('> ', 'setTimeout(console.log, 2000, "this is","a test")\n')
.when(/this is a test/, function(exe) {
    
    exe.kill();
    
})
.on('error', function(err) {
    
    if (error.message.indexOf('terminating on signal 15 from pid') < 0) {
        
        console.trace(err);
        
    };
    
})
.end(function() {
    clearTimeout(timeout);

    var expects = this.expects.length;
    if (expects) {
        
        process.exit(expects);
        
    };
});
